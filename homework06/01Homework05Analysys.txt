Алгоритм проверки Java класса на соответствие SOLID принципам:
Принцип единственной ответственности (SRP):

Определим задачи и ответственности класса.
Убедимся, что класс отвечает только за одну задачу.
Принцип открытости/закрытости (OCP):

Убедимся, что класс можно расширить без изменения его исходного кода.
Принцип подстановки Барбары Лисков (LSP):

Убедимся, что производные классы могут заменять базовый класс без нарушения корректности программы.
Принцип разделения интерфейса (ISP):

Убедимся, что интерфейсы, реализуемые классом, содержат только необходимые методы.
Принцип инверсии зависимостей (DIP):

Убедимся, что класс зависит от абстракций, а не от конкретных реализаций.
Применение этих принципов поможет создать гибкие, расширяемые и поддерживаемые классы.

Проверка классов проекта homework05 на соответствие принципам SOLID
Класс User
SRP: Класс User отвечает только за хранение ФИО пользователя.
OCP: Класс легко расширяется без изменения его исходного кода (пример: классы Teacher и Student).
LSP: Классы-наследники Teacher и Student могут заменить User без нарушения логики программы.
ISP: Класс содержит только нужные методы для работы с ФИО.
DIP: Класс не зависит от других классов.
Таким образом, класс User соответствует принципам SOLID.

Класс Student
SRP: Класс Student отвечает за хранение информации о студенте (ID и ФИО).
OCP: Класс расширяет User без изменения его кода.
LSP: Класс можно использовать вместо User без нарушения логики программы.
ISP: Класс не реализует лишние интерфейсы.
DIP: Класс не зависит от других классов.
Класс Student соответствует принципам SOLID.

Класс Teacher
SRP: Класс Teacher отвечает за хранение информации о преподавателе (ID и ФИО).
OCP: Класс расширяет User без изменения его кода.
LSP: Класс можно использовать вместо User без нарушения логики программы.
ISP: Класс не реализует лишние интерфейсы.
DIP: Класс не зависит от других классов.
Класс Teacher соответствует принципам SOLID.

Класс StudentGroup
SRP: Управляет списком студентов и преподавателем.
OCP: Легко расширяется для добавления новых атрибутов.
LSP: Не применим, так как нет наследников.
ISP: Не применим, так как не реализует интерфейсы.
DIP: Использует абстракции (Student, Teacher).
Класс StudentGroup соответствует принципам SOLID.

Класс DataService
SRP: Управляет данными пользователей (CRUD операции).
OCP: Можно добавить новые функции управления данными без изменения кода.
LSP: Работает с абстракциями (User, Student, Teacher).
ISP: Не применим, так как не реализует интерфейсы.
DIP: Использует абстракции.
Класс DataService соответствует принципам SOLID.

Класс StudentGroupService
SRP: Управляет созданием и хранением учебных групп.
OCP: Можно добавить новые операции с группами без изменения кода.
LSP: Не применим, так как нет наследников.
ISP: Не применим, так как не реализует интерфейсы.
DIP: Использует абстракции (StudentGroup).
Класс StudentGroupService соответствует принципам SOLID.

Класс Controller
SRP: Управляет действиями пользователей (создание студентов, преподавателей, назначение в группы).
OCP: Можно добавить новые методы управления без изменения кода.
LSP: Не применим, так как нет наследников.
ISP: Не применим, так как не реализует интерфейсы.
DIP: Использует абстракции (DataService, StudentGroupService).
Класс Controller соответствует принципам SOLID.

Интерфейс UserView
SRP: Определяет методы для представления данных о пользователях.
OCP: Можно добавить новые виды представлений без изменения интерфейса.
LSP: Не применим, так как нет наследников.
ISP: Содержит только нужные методы.
DIP: Интерфейс является абстракцией.
Интерфейс UserView соответствует принципам SOLID.

Классы StudentView и TeacherView
SRP: Отвечают за представление данных о студентах и преподавателях соответственно.
OCP: Можно добавить новые виды представлений.
LSP: Наследуются и реализуют методы UserView.
ISP: Реализуют только нужные методы.
DIP: Реализуют интерфейс UserView.
StudentView и TeacherView соответствуют принципам SOLID.

Класс StudentGroupView
SRP: Отвечает за представление данных об учебных группах.
OCP: Можно добавить новые виды представлений.
LSP: Не применим.
ISP: Не применим.
DIP: Использует абстракцию StudentGroup.
Класс StudentGroupView соответствует принципам SOLID.

Заключение
Принципы SOLID – это мощный набор рекомендаций, который помогает создавать гибкие и поддерживаемые системы. 
Проанализировав наш проект homework05, можно уверенно сказать, что он построен на крепком фундаменте этих принципов. 
Такие классы можно легко расширять, поддерживать, а также адаптировать под изменяющиеся требования и новые функциональные добавки. 
Эти аспекты делают наш код более устойчивым и пригодным для долгосрочного использования, снижая потенциальные риски будущих изменений.